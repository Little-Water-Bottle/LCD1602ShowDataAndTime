C51 COMPILER V9.01   LM016L                                                                01/04/2021 22:20:20 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE LM016L
OBJECT MODULE PLACED IN LM016L.obj
COMPILER INVOKED BY: D:\App_program\Keil4\keil4\install_location\C51\BIN\C51.EXE HardWare\LM016L.c BROWSE INCDIR(.\HardW
                    -are;..\LM016L显示时钟和日期) DEBUG OBJECTEXTEND PRINT(.\LM016L.lst) OBJECT(LM016L.obj)

line level    source

   1          #include <reg52.h>
   2          #include <intrins.h>
   3          #include "LM016L.h"
   4          #include "main.h"
   5          
   6          //引脚定义
   7          sbit RS=P2^0;
   8          sbit RW=P2^1;
   9          sbit E=P2^2;
  10          sbit BF=P0^7;
  11          
  12          void delay1ms()
  13          {
  14   1              unsigned char i,j;
  15   1              for(i=0;i<10;i++)
  16   1              for(j=0;j<33;j++);
  17   1      }
  18          
  19          /*****************************************************
  20          函数功能：延时若干毫秒
  21          入口参数： n
  22          ***************************************************/
  23          void delaynms(unsigned char n)
  24          {
  25   1              unsigned char i;
  26   1              for(i=0;i<n;i++)
  27   1              delay1ms();
  28   1      }
  29          
  30          /********************
  31          函数功能：判断液晶模块是否忙碌
  32          入口参数：无
  33          返回值：result  1忙碌 0空闲
  34          **********************/
  35          bit BusyTest(void)
  36          {
  37   1              bit result;
  38   1              RS=0;
  39   1              RW=1;//此时才可以读状态
  40   1      
  41   1              E=0;            //加上一点延时，否则在显示第二位时显示高阻态会不显示
  42   1              _nop_();
  43   1              _nop_();
  44   1              _nop_();
  45   1              _nop_();
  46   1      
  47   1              E=1;//此时才允许读写
  48   1              _nop_();
  49   1              _nop_();
  50   1              _nop_();
  51   1              _nop_();//四个空操作，给硬件反应时间
  52   1              result=BF;//将忙碌标值赋值给result
  53   1              E=0;
  54   1              return result;
C51 COMPILER V9.01   LM016L                                                                01/04/2021 22:20:20 PAGE 2   

  55   1      }
  56          
  57          
  58          
  59          
  60          
  61          
  62          /*****************************************************
  63          函数功能：指定字符显示的实际地址
  64          入口参数： x
  65          ***************************************************/
  66          void WriteAddress(unsigned char x)
  67          {
  68   1              WriteInstruction(x|0x80); // 显示位置的确定方法规定为 "80H+地址码 x"
  69   1      }
  70          
  71          /*****************************************************
  72          函数功能：将模式设置指令或显示地址写入液晶模块
  73          入口参数： dictate
  74          ***************************************************/
  75          void WriteInstruction(unsigned char dictate)
  76          {
  77   1              while(BusyTest()==1);
  78   1              RS=0;
  79   1              RW=0;
  80   1              E=0;
  81   1              _nop_();
  82   1        _nop_();
  83   1              P0=dictate;
  84   1              _nop_();
  85   1        _nop_();
  86   1        _nop_();
  87   1        _nop_(); // 空操作四个机器周期，给硬件反应时间
  88   1        E=1;
  89   1              _nop_();
  90   1        _nop_();
  91   1        _nop_();
  92   1        _nop_(); // 空操作四个机器周期，给硬件反应时间
  93   1        E=0;
  94   1      }
  95          
  96          
  97          /*****************************************************
  98          函数功能：将数据 (字符的标准 ASCII 码) 写入液晶模块
  99          入口参数： y( 为字符常量 )
 100          ***************************************************/
 101          void WriteData(char y)
 102          {
 103   1              while(BusyTest()==1);
 104   1      
 105   1              RS=1; //RS 为高电平， RW为低电平时，可以写入数据
 106   1              RW=0;
 107   1              E=0; //E 置低电平 ( 根据表 8-6 ，写指令时， E 为高脉冲，
 108   1              // 就是让 E 从 0 到 1 发生正跳变，所以应先置 "0"
 109   1              P0=y; // 将数据送入 P0 口，即将数据写入液晶模块
 110   1              _nop_();
 111   1              _nop_();
 112   1              _nop_();
 113   1              _nop_(); // 空操作四个机器周期，给硬件反应时间
 114   1              E=1; //E 置高电平
 115   1              _nop_();
 116   1              _nop_();
C51 COMPILER V9.01   LM016L                                                                01/04/2021 22:20:20 PAGE 3   

 117   1              _nop_();
 118   1              _nop_(); // 空操作四个机器周期，给硬件反应时间
 119   1              E=0; // 当 E 由高电平跳变成低电平时，液晶模块开始执行命令
 120   1      }
 121          
 122          
 123          
 124          
 125          
 126          
 127          
 128          
 129          /*****************************************************
 130          函数功能：对 LCD的显示模式进行初始化设置
 131          ***************************************************/
 132          void LcdInitiate(void)
 133          {
 134   1              delaynms(100); // 延时 15ms，首次写指令时应给 LCD一段较长的反应时间
 135   1      //      WriteInstruction(0x38); // 显示模式设置： 16×2 显示， 5×7 点阵， 8 位数据接口
 136   1      //      delaynms(5); // 延时 5ms ，给硬件一点反应时间
 137   1              WriteInstruction(0x38);
 138   1              delaynms(5); // 延时 5ms ，给硬件一点反应时间
 139   1              WriteInstruction(0x38); // 连续三次，确保初始化成功
 140   1              delaynms(5); // 延时 5ms ，给硬件一点反应时间
 141   1              WriteInstruction(0x0c); // 显示模式设置：显示开，无光标，光标不闪烁     0x0f光标闪烁
 142   1              delaynms(5); // 延时 5ms ，给硬件一点反应时间
 143   1              WriteInstruction(0x06); // 显示模式设置：光标右移，字符不移
 144   1              delaynms(5); // 延时 5ms ，给硬件一点反应时间
 145   1              WriteInstruction(0x01); // 清屏幕指令，将以前的显示内容清除
 146   1              delaynms(5); // 延时 5ms ，给硬件一点反应时间
 147   1              CgramWrite();//向CGRAM写入自定义字符
 148   1              delaynms(5); // 延时 5ms ，给硬件一点反应时间
 149   1      }
 150          
 151          
 152          ///////////////////////////////////////////////////////////////////////
 153          
 154          // 写数据程序 //
 155          void LCD1602_WriteData(unsigned int LCD1602_data)
 156          { 
 157   1         while(BusyTest()==1);
 158   1         RS = 1;
 159   1         RW = 0;
 160   1         E=0;
 161   1         P0 = LCD1602_data;
 162   1              _nop_();
 163   1              _nop_();
 164   1              _nop_();
 165   1              _nop_();
 166   1              E=1;
 167   1              _nop_();
 168   1              _nop_();
 169   1              _nop_();
 170   1              _nop_();
 171   1         E = 0;
 172   1         delaynms(5);  // 修改延时，改变显示速度
 173   1      }
 174          
 175          
 176          // 自定义字符 一共可写入16个自字义字符，写入后可用其CGRAM代码直接提取显示。
 177          unsigned int code Xword[]={
 178              0x18,0x18,0x07,0x08,0x08,0x08,0x07,0x00,  //℃，代码 0x00
C51 COMPILER V9.01   LM016L                                                                01/04/2021 22:20:20 PAGE 4   

 179              0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,  //一，代码 0x01
 180              0x00,0x00,0x00,0x0e,0x00,0xff,0x00,0x00,  //二，代码 0x02
 181              0x00,0x00,0xff,0x00,0x0e,0x00,0xff,0x00,  //三，代码 0x03
 182              0x00,0x00,0xff,0xf5,0xfb,0xf1,0xff,0x00,  //四，代码 0x04
 183              0x00,0xfe,0x08,0xfe,0x0a,0x0a,0xff,0x00,  //五，代码 0x05
 184              0x00,0x04,0x00,0xff,0x00,0x0a,0x11,0x00,  //六，代码 0x06
 185              0x00,0x1f,0x11,0x1f,0x11,0x11,0x1f,0x00  //日，代码 0x07
 186          };
 187          
 188          void CgramWrite(void)   // 装入CGRAM //
 189          { 
 190   1          unsigned int i;
 191   1          WriteInstruction(0x06);   // CGRAM地址自动加1
 192   1          WriteInstruction(0x40);   // CGRAM地址设为00处
 193   1      //      WriteAddress(0x40);
 194   1          for(i=0;i<64;i++) 
 195   1              {
 196   2          LCD1602_WriteData(Xword[i]);// 按数组写入数据
 197   2          }
 198   1      //      LCD1602_WriteData(0x00);
 199   1      }
 200          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    259    ----
   CONSTANT SIZE    =    128    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
